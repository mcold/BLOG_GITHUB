unittest
########

:date: 2018-07-29 23:00
:modified: 2018-07-29 23:00
:tags: test
:category: python
:slug: module/unittest
:authors: Michael Cold
:summary: Тестируем функционал при помощи пакета unittest

API
===





Каждый метод включает 2 аргумента сравнения и текст сообщения в качестве 3-его. 


assertIsInstance
assertIs

assertIn

assert<type>Equal

assertLess, assertGreater


Компоненты
==========

Test fixture
------------

Test fixture – обеспечивает подготовку окружения для выполнения тестов, а также организацию мероприятий по их корректному завершению (например очистка ресурсов). Подготовка окружения может включать в себя создание баз данных, запуск необходим серверов и т.п.

Test case
---------

Test case – это элементарная единица тестирования, в рамках которой проверяется работа компонента тестируемой программы (метод, класс, поведение и т.п.). Для реализации этой сущности используется класс TestCase.

Test suite
----------

Test suite – это коллекция тестов, которая может в себя включать как отдельные test case’ы так и целые коллекции (т.е. можно создавать коллекции коллекций). Коллекции используются с целью объединения тестов для совместного запуска.

Test runner
-----------

Test runner – это компонент, которые оркестрирует (координирует взаимодействие) запуск тестов и предоставляет пользователю результат их выполнения. Test runner может иметь графический интерфейс, текстовый интерфейс или возвращать какое-то заранее заданное значение, которое будет описывать результат прохождения тестов.

Вся работа по написанию тестов заключается в том, что мы разрабатываем отдельные тесты в рамках test case’ов, собираем их в модули и запускаем, если нужно объединить несколько test case’ов, для их совместного запуска, они помещаются в test suite’ы, которые помимо test case’ов могут содержать другие test suite’ы.


TestCase
========

1. Создадим файл с именем utest_calc.py

2. Добавим в него следующий код:

.. code-block:: py

        
    import unittest
    import calc
    
    class CalcTest(unittest.TestCase):
        def test_add(self):
            self.assertEqual(calc.add(1, 2), 3)
            
        def test_sub(self):
            self.assertEqual(calc.sub(4, 2), 2)
            
        def test_mul(self):
            self.assertEqual(calc.mul(2, 5), 10)
            
        def test_div(self):
            self.assertEqual(calc.div(8, 4), 2)
            
    if __name__ == '__main__':
        unittest.main()


3. Запустим файл utest_calc.py

::

    python -m unittest utest_calc.py

Такой формат запуска предполагает вывод минимальной информации. В данном случае все тесты успешно завершились.

::

    ....
    ----------------------------------------------------------------------
    Ran 4 tests in 0.000s
    OK

4. Запуск можно сделать с запросом расширенной информации по пройденным тестам, для этого необходимо добавить ключ -v:

::

    python -m unittest -v utest_calc.py

В этом случае результат будет таким:

::

    test_add (test_calc_v2.CalcTest) ... ok
    test_div (test_calc_v2.CalcTest) ... ok
    test_mul (test_calc_v2.CalcTest) ... ok
    test_sub (test_calc_v2.CalcTest) ... ok
    ----------------------------------------------------------------------
    Ran 4 tests in 0.002s
    OK